// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as T$Codenames from "./T.bs.js";

var tiles = [
  {
    word: "LEMONS",
    status: /* Hidden */0,
    color: /* Black */0
  },
  {
    word: "WATER",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "ORANGE",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "COMPUTER",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "DOLPHIN",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "ALASKAN",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "ANTARTICA",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "TELEVISION",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "PIEKARCZYK",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "MONKEY",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "KITCHEN",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "REFRIGERATOR",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "BLUEBERRIES",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "TILES",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "FLOOR",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "CONSOLE",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "LAPTOP",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "MONITOR",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "MATTHEWS",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "ZEBRA",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "DESK",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "FRESH",
    status: /* Hidden */0,
    color: /* Red */2
  },
  {
    word: "PEPSI",
    status: /* Hidden */0,
    color: /* Neutral */3
  },
  {
    word: "MOUSE",
    status: /* Hidden */0,
    color: /* Blue */1
  },
  {
    word: "KEYBOARD",
    status: /* Hidden */0,
    color: /* Red */2
  }
];

function GameView$Tile(Props) {
  var showAll = Props.showAll;
  var word = Props.word;
  var color = Props.color;
  var status = Props.status;
  var onClick = Props.onClick;
  var cs = showAll ? (
      status ? "selected " + T$Codenames.getColor(color) : T$Codenames.getColor(color)
    ) : (
      status ? T$Codenames.getColor(color) : ""
    );
  var disabled = status === /* Turned */1;
  return React.createElement("button", {
              className: "text-black rounded text-center cursor-pointer\n        font-bold bg-white " + cs,
              disabled: disabled,
              onClick: (function (param) {
                  return Curry._2(onClick, word, color);
                })
            }, word);
}

var Tile = {
  make: GameView$Tile
};

function GameView$Board(Props) {
  var showAll = Props.showAll;
  var tiles = Props.tiles;
  var onClick = Props.onClick;
  return React.createElement("main", {
              className: "grid grid-cols-5 grid-rows-5 gap-2 h-full"
            }, Belt_Array.map(tiles, (function (t) {
                    return React.createElement(GameView$Tile, {
                                showAll: showAll,
                                word: t.word,
                                color: t.color,
                                status: t.status,
                                onClick: onClick
                              });
                  })));
}

var Board = {
  make: GameView$Board
};

function GameView$Button(Props) {
  var label = Props.label;
  var onClick = Props.onClick;
  return React.createElement("button", {
              className: "bg-blue-500 hover:bg-blue-600 text-white font-medium py-1 px-3\n      rounded transition duration-75",
              onClick: (function (param) {
                  return Curry._1(onClick, /* () */0);
                })
            }, label);
}

var Button = {
  make: GameView$Button
};

function GameView$Score(Props) {
  var red = Props.red;
  var blue = Props.blue;
  return React.createElement("div", {
              className: "flex"
            }, React.createElement("div", {
                  className: "rounded-full w-6 h-6 bg-red-500 text-white text-center\n      mx-1"
                }, String(red)), "vs", React.createElement("div", {
                  className: "rounded-full w-6 h-6 bg-blue-500 text-white text-center\n        mx-1"
                }, String(blue)));
}

var Score = {
  make: GameView$Score
};

function GameView$Header(Props) {
  var blueScore = Props.blueScore;
  var redScore = Props.redScore;
  var onClickNewGame = Props.onClickNewGame;
  var onClickSpymaster = Props.onClickSpymaster;
  return React.createElement("header", {
              className: "bg-white flex justify-between items-center rounded p-1"
            }, React.createElement("h1", {
                  className: "font-bold text-lg"
                }, "Virtual Codenames"), React.createElement(GameView$Score, {
                  red: redScore,
                  blue: blueScore
                }), React.createElement("div", {
                  className: "flex"
                }, React.createElement(GameView$Button, {
                      label: "Spymaster",
                      onClick: onClickSpymaster
                    }), React.createElement("div", {
                      className: "w-1"
                    }), React.createElement(GameView$Button, {
                      label: "New Game",
                      onClick: onClickNewGame
                    })));
}

var Header = {
  make: GameView$Header
};

function GameView(Props) {
  var id = Props.id;
  React.useEffect((function () {
          console.log(id);
          return ;
        }), ([]));
  var match = React.useReducer((function (state, action) {
          if (action) {
            var color = action[1];
            var word = action[0];
            var tiles = Belt_Array.map(state.tiles, (function (t) {
                    if (t.word === word) {
                      return {
                              word: t.word,
                              status: /* Turned */1,
                              color: t.color
                            };
                    } else {
                      return t;
                    }
                  }));
            var match;
            if (color !== 0) {
              switch (color - 1 | 0) {
                case /* Black */0 :
                    match = /* tuple */[
                      state.blueScore - 1 | 0,
                      state.redScore
                    ];
                    break;
                case /* Blue */1 :
                    match = /* tuple */[
                      state.redScore - 1 | 0,
                      state.blueScore
                    ];
                    break;
                case /* Red */2 :
                    match = /* tuple */[
                      state.blueScore,
                      state.redScore
                    ];
                    break;
                
              }
            } else {
              match = /* tuple */[
                state.blueScore,
                state.redScore
              ];
            }
            return {
                    blueScore: match[0],
                    redScore: match[1],
                    showAll: state.showAll,
                    channel: state.channel,
                    firstTurn: state.firstTurn,
                    tiles: tiles
                  };
          } else {
            return {
                    blueScore: state.blueScore,
                    redScore: state.redScore,
                    showAll: !state.showAll,
                    channel: state.channel,
                    firstTurn: state.firstTurn,
                    tiles: state.tiles
                  };
          }
        }), {
        blueScore: 8,
        redScore: 9,
        showAll: false,
        channel: "fun-fridays",
        firstTurn: "blue",
        tiles: tiles
      });
  var dispatch = match[1];
  var state = match[0];
  var onClickTile = function (word, color) {
    return Curry._1(dispatch, /* Toggle */[
                word,
                color
              ]);
  };
  return React.createElement("div", {
              className: "max-w-screen-xl mx-auto flex flex-col h-screen"
            }, React.createElement("div", {
                  className: "mb-2"
                }, React.createElement(GameView$Header, {
                      blueScore: state.blueScore,
                      redScore: state.redScore,
                      onClickNewGame: (function (param) {
                          console.log("hi");
                          return /* () */0;
                        }),
                      onClickSpymaster: (function (param) {
                          console.log("hey");
                          return /* () */0;
                        })
                    })), React.createElement(GameView$Board, {
                  showAll: state.showAll,
                  tiles: state.tiles,
                  onClick: onClickTile
                }));
}

var make = GameView;

export {
  tiles ,
  Tile ,
  Board ,
  Button ,
  Score ,
  Header ,
  make ,
  
}
/* react Not a pure module */
